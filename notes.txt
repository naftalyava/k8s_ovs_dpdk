# k8s_ovs_dpdk
The goal of this project is to enable east-west traffic for dpdk based applications running in pods on two different nodes.

Setup
VM0 - Nested Hypervisor [LINUX] + KVM + OVS-DPDK
VM1 [running on VM0] - K8s Master
VM2 [running on VM0] - K8s Worker0 // Enable DPDK based app in POD to send traffic to another app running on another POD [on worker1 node]
VM3 [running on VM0] - K8s Worker1


Milestones:
-----------

0. Install and configure VM0 with OVS-DPDK and KVM [V]
1. Install and configure VM1 with DPDK, consume vhost-user-client port [guest is the server] - [V]
2. Install and configure VM1 with DPDK, consume vhost-user-client port [guest is the server] - [V]
3. Run DPDK test app with traffic between VM1 and VM2. []
4. TODO







OVS-DPDK install
----------------

// was unable to install from sources

sudo apt-get install openvswitch-switch-dpdk
sudo update-alternatives --set ovs-vswitchd /usr/lib/openvswitch-switch-dpdk/ovs-vswitchd-dpdk
sudo ovs-vsctl set Open_vSwitch . "other_config:dpdk-init=true"


// run on core 0 only
sudo ovs-vsctl set Open_vSwitch . "other_config:dpdk-lcore-mask=0x1"

// enable vhost-iommu
sudo ovs-vsctl set Open_vSwitch . other_config:vhost-iommu-support=true

// run time allocation of huge pages where N = No. of 2M huge pages
sudo sysctl -w vm.nr_hugepages=6144

// verify hugepage configuration
grep HugePages_ /proc/meminfo

// mount the hugepages
sudo su -
mount -t hugetlbfs none /dev/hugepages``

// limit to one whitelisted device
sudo ovs-vsctl set Open_vSwitch . "other_config:dpdk-extra=--pci-whitelist=0000:04:00.0"

// restart ovs
sudo service openvswitch-switch restart




// Configuration of Guest interfaces 
// mode: host is client 
<interface type='vhostuser'>
<source type='unix'
path='/tmp/vhost-user-client-k8sworker0'
mode='server'/>
<model type='virtio'/>
</interface>

// mode: host is server
<interface type="vhostuser">
  <mac address="56:48:4f:53:54:01"/>
  <source type="unix" path="/var/run/openvswitch/vhost-user-1" mode="client"/>
  <target dev="vhost-user-1"/>
  <model type="virtio"/>
  <driver name="vhost" rx_queue_size="256"/>
  <alias name="net1"/>
  <address type="pci" domain="0x0000" bus="0x02" slot="0x00" function="0x0"/>
</interface>


// connect guest to OVS with tap ports
<interface type="bridge">
  <mac address="52:54:00:71:b1:b6"/>
  <source bridge="north_south"/>
  <virtualport type="openvswitch">
    <parameters interfaceid="36cf8691-9674-435f-87d8-7e1b8e5eef18"/>
  </virtualport>
  <target dev="vport1"/>
  <model type="rtl8139"/>
  <alias name="net0"/>
  <address type="pci" domain="0x0000" bus="0x01" slot="0x00" function="0x0"/>
</interface>


Network Configuration
---------------------

// configure east-west k8s data plane - vhost-user-client
sudo ovs-vsctl add-br east_west_dp -- set bridge east_west_dp datapath_type=netdev
sudo ovs-vsctl add-port east_west_dp vhost-user-k8sworker0 -- set Interface vhost-user-k8sworker0 type=dpdkvhostuserclient "options:vhost-server-path=/tmp/vhost-user-client-k8sworker0"
sudo ovs-vsctl add-port east_west_dp vhost-user-k8sworker1 -- set Interface vhost-user-k8sworker1 type=dpdkvhostuserclient "options:vhost-server-path=/tmp/vhost-user-client-k8sworker1"


// configure east-west k8s data plane - vhost-user
sudo ovs-vsctl add-port east_west_dp vhost-user-1 --  set Interface vhost-user-1 type=dpdkvhostuser
sudo ovs-vsctl add-port east_west_dp vhost-user-2 --  set Interface vhost-user-2 type=dpdkvhostuser





//ovs-vsctl -- --columns=name,ofport list Interface
sudo ovs-ofctl del-flows east_west_dp
sudo ovs-ofctl add-flow east_west_dp in_port=1,actions=output:2
sudo ovs-ofctl add-flow east_west_dp in_port=2,actions=output:1












scratch:
--------


sudo apt-get install meson python3-pyelftools python-pyelftools libz-dev libpcap-dev libnuma-dev libssl-dev autoconf libtool libdbus-1-dev git
sudo apt-get install dpdk-dev libdpdk-dev


DPDK Install
------------

git clone http://dpdk.org/git/dpdk
cd dpdk
meson build
ninja -C build
sudo ninja -C build install
sudo ldconfig
export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig/
// if version is printed all is ok
pkg-config --modversion libdpdk










// configure east-west k8s control plane
sudo ip tuntap add mode tap k8sworker0_cp
sudo ip tuntap add mode tap k8sworker1_cp
sudo ifconfig k8sworker0_cp up
sudo ifconfig k8sworker1_cp up
sudo ovs-vsctl add-br east_west_cp
sudo ovs-vsctl add-port east_west_cp k8sworker0_cp
sudo ovs-vsctl add-port east_west_cp k8sworker1_cp



// configure north-south


sudo ip tuntap add mode tap vport1
sudo ip tuntap add mode tap vport2
sudo ifconfig vport1 up
sudo ifconfig vport2 up
sudo ovs-vsctl add-br north_south
sudo ovs-vsctl add-port north_south vport1
sudo ovs-vsctl add-port north_south vport2




Inside guest os:
sudo su -
echo 1 > /sys/module/vfio/parameters/enable_unsafe_noiommu_mode
sudo modprobe uio_pci_generic
sudo dpdk-devbind.py --status 
sudo dpdk-devbind.py -b uio_pci_generic 0000:02:00.0

trying uio:
sysctl vm.nr_hugepages=1024
mkdir -p /dev/hugepages
mount -t hugetlbfs hugetlbfs /dev/hugepages  # only if not already mounted
modprobe uio
insmod $DPDK_BUILD/kmod/igb_uio.ko
$DPDK_DIR/usertools/dpdk-devbind.py --status
$DPDK_DIR/usertools/dpdk-devbind.py -b igb_uio 00:03.0 00:04.0
